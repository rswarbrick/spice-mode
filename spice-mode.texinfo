\input texinfo
@setfilename spice-mode.info
@settitle SPICE Mode Manual 1.101

@copying
This is a manual for the Emacs SPICE Mode, version 1.101.

Copyright @copyright{} 2012 Rupert Swarbrick
@end copying

@titlepage
@title SPICE Mode Manual
@author Rupert Swarbrick
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top SPICE Mode manual

This is a manual for Emacs SPICE Mode, version 1.101
@end ifnottex

@menu
* Introduction::                What is SPICE mode?
* Installation::                How do I install it?

* Flavours of SPICE::           What are you running?
* New Files::                   Inserting boilerplate

* Advanced customisation::      Customising SPICE mode with your elisp-fu

* Index::                       Index.

@end menu

@node Introduction, Installation, Top, Top
@chapter Introduction
@cindex Introduction
@c
This manual describes @file{spice-mode.el}, an elisp library that
provides a major mode for editing SPICE netlists in Emacs.

The code was originally written by Geert A. M. Van der Plas, Emmanuel
Rouat and Carlin J. Vieri in the 1990s and has been tidied up a bit and
given a manual and test-suite by Rupert Swarbrick, starting in 2012. In
particular, Rupert (who finds writing about himself in the third person
rather strange) is British. As such, there's a weird mix of British and
American spelling in the manual. Sorry.

@node Installation, Flavours of SPICE, Introduction, Top
@chapter Installation
@cindex Installation
@c
To install spice-mode.el, there are three (simple!) things you need to
do. You need to tell Emacs from where to load it, when to load it and
how to load it. That is, you need to stick the code somewhere and tell
Emacs about it; you need to tell Emacs to use the @code{spice-mode} mode
for SPICE files and, finally, you need to tell Emacs that
@code{spice-mode} lives in @file{spice-mode.el}.

@cindex @code{load-path}, adding @file{spice-mode.el} to
To make Emacs able to load it, the easiest approach is to put the
@file{spice-mode} directory somewhere convenient (such as
@file{~/.emacs.d} on a *nix system) and then add this directory to your
Emacs load path. Assuming that the code is installed at
@file{~/.emacs.d/spice-mode}, you then need to add the following line to
your @file{~/.emacs} file:

@example
(add-to-list 'load-path "~/.emacs.d/spice-mode")
@end example

To check it works, evaluate the form by hitting @kbd{C-x C-e} after
it. Don't load the library yet (otherwise checking for auto-loads needs
you to restart Emacs), but you can check that Emacs can now find the
file by typing @kbd{M-:} and then:

@example
(locate-library "spice-mode")
@end example

If you're reading this in Emacs, you can just hit @kbd{C-x C-e} after
the code on the previous line instead. If all goes to plan, you should
see something like @code{"/some/path/spice-mode.el"} in the message
bar. If you see @code{nil}, Emacs couldn't find the file and you
probably need to fix something.

@cindex autoloads
Now, let's tell Emacs to use @code{spice-mode} for spice files. Add
something like the following to your @file{~/.emacs} file. If you use
different file extensions, alter the list in the obvious way.

@example
(dolist (extension '("\\.sp$" "\\.cir$" "\\.ckt$" "\\.mod$"
                     "\\.cdl$" "\\.chi$" "\\.inp$"))
  (add-to-list 'auto-mode-alist (cons extension 'spice-mode)))
@end example

To try it out now, use @kbd{C-x C-e} as usual. The code is idempotent,
so doing it twice won't break anything.

The final job is to tell Emacs how to load @code{spice-mode}: by looking
in @file{spice-mode.el}, of course! To do so, add

@example
(autoload 'spice-mode "spice-mode" "Spice editing mode" t)
@end example

to your @file{~/.emacs} and run it now by using @kbd{C-x C-e}. With a
bit of luck, when you visit a SPICE file, Emacs will correctly use
@file{spice-mode.el} to give it syntax highlighting and other
goodness. Now read the rest of the manual to discover what the mode can
do for you!

One more thing: Although everything should now work, it won't load as
quickly as it might. To improve load times, you should byte-compile the
file. To do so, type @kbd{M-x byte-compile-file} and give it the file
name of the installed @file{spice-mode.el}. After doing so, the
@code{locate-library} test above should return a string ending in
@code{"spice-mode.elc"}.

@node Flavours of SPICE, New Files, Installation, Top
@chapter Flavours of SPICE
@cindex SPICE standards
@cindex implementations

@cindex spice-standard
There are many descendants of the original Berkeley SPICE, each of which
has a slightly different syntax. In order to get syntax highlighting to
exactly match the implementation you use, customise the
@code{spice-standard} variable. Currently, SPICE mode supports the basic
Berkeley SPICE syntax and then optionally: Hspice, Eldo, EldoRf,
EldoVlogA, FastHenry, LAYLA, MONDRIAAN, DracCDL and Spectre.

@node New Files, Advanced customisation, Flavours of SPICE, Top
@chapter New Files
@cindex new files
@cindex boilerplate, inserting
@cindex automatically inserting boilerplate

@cindex spice-initialize-empty-file
SPICE mode can be configured so that when you open a new file (well,
create an empty buffer), it automatically inserts tedious boilerplate
text for you. The master control for this is the
@code{spice-initialize-empty-file} variable. If this variable is true
then text is automatically added to the file.

@cindex spice-initialize-template-file
Firstly, SPICE mode looks at the @code{spice-initialize-template-file}
variable. This is set to @file{~/.spice-default} by default. If the
named file exists, it is inserted verbatime (followed by a changelog
entry).

If the named template file doesn't exist, SPICE mode inserts some
generic boilerplate which takes into account which of the SPICE
standards is configured.

@node Advanced customisation, Index, New Files, Top
@chapter Advanced customisation
@cindex advanced customisation

@cindex mode hooks
@cindex spice-mode-hook
If you know some Emacs Lisp, you'll no doubt be itching to make more
dramatic customisations to your local copy of SPICE mode. The most
obvious place to start with most Emacs major modes is their mode hooks
and SPICE mode has one, called @code{spice-mode-hook}. It should contain
a list of functions to be run when @code{spice-mode} starts.
@xref{Hooks, , Hooks, Elisp, The Emacs Lisp Manual}, for
more information about hook variables.

@node Index,  , Advanced customisation, Top
@unnumbered Index
@printindex cp
@bye
